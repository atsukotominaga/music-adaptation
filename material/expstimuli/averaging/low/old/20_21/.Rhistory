}
# 2. average duration
dt_du_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i) #onset
stim_offset <- combining_offset(valid, i)
# calculate Duration
stim$Duration <- stim_offset$TimeStamp - stim_onset$TimeStamp
stim[Tempo == 120]$Tempo <- 250
stim[Tempo == 110]$Tempo <- 273
stim[Tempo == 100]$Tempo <- 300
stim$normDu <- stim$Duration/Tempo
# average normDu
stim_average <- stim_onset[, .(N = length(normDu), Mean = mean(normDu), SD = sd(normDu)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_du_instance <- rbind(dt_du_instance, stim_average)
# next instance
counter = counter+4
}
# 2. average duration
dt_du_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i) #onset
stim_offset <- combining_offset(valid, i)
# calculate Duration
stim$Duration <- stim_offset$TimeStamp - stim$TimeStamp
stim[Tempo == 120]$Tempo <- 250
stim[Tempo == 110]$Tempo <- 273
stim[Tempo == 100]$Tempo <- 300
stim$normDu <- stim$Duration/Tempo
# average normDu
stim_average <- stim_onset[, .(N = length(normDu), Mean = mean(normDu), SD = sd(normDu)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_du_instance <- rbind(dt_du_instance, stim_average)
# next instance
counter = counter+4
}
# 2. average duration
dt_du_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i) #onset
stim_offset <- combining_offset(valid, i)
# calculate Duration
stim$Duration <- stim_offset$TimeStamp - stim$TimeStamp
stim[Tempo == 120]$Tempo <- 250
stim[Tempo == 110]$Tempo <- 273
stim[Tempo == 100]$Tempo <- 300
stim$normDu <- stim$Duration/stim$Tempo
# average normDu
stim_average <- stim_onset[, .(N = length(normDu), Mean = mean(normDu), SD = sd(normDu)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_du_instance <- rbind(dt_du_instance, stim_average)
# next instance
counter = counter+4
}
# 2. average duration
dt_du_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i) #onset
stim_offset <- combining_offset(valid, i)
# calculate Duration
stim$Duration <- stim_offset$TimeStamp - stim$TimeStamp
stim[Tempo == 120]$Tempo <- 250
stim[Tempo == 110]$Tempo <- 273
stim[Tempo == 100]$Tempo <- 300
stim$normDu <- stim$Duration/stim$Tempo
# average normDu
stim_average <- stim[, .(N = length(normDu), Mean = mean(normDu), SD = sd(normDu)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_du_instance <- rbind(dt_du_instance, stim_average)
# next instance
counter = counter+4
}
View(dt_du_instance)
fwrite(valid, "./valid.txt")
combining_onset <- function(valid, number){
SubNr1 <- valid[Sample == number+counter]$SubNr
SubNr2 <- valid[Sample == number+1+counter]$SubNr
SubNr3 <- valid[Sample == number+2+counter]$SubNr
SubNr4 <- valid[Sample == number+3+counter]$SubNr
SubNr5 <- valid[Sample == number+4+counter]$SubNr
TrialNr1 <- valid[Sample == number+counter]$TrialNr
TrialNr2 <- valid[Sample == number+1+counter]$TrialNr
TrialNr3 <- valid[Sample == number+2+counter]$TrialNr
TrialNr4 <- valid[Sample == number+3+counter]$TrialNr
TrialNr5 <- valid[Sample == number+4+counter]$TrialNr
stim_1 <- dt_onset[SubNr == SubNr1 & TrialNr == TrialNr1]
stim_2 <- dt_onset[SubNr == SubNr2 & TrialNr == TrialNr2]
stim_3 <- dt_onset[SubNr == SubNr3 & TrialNr == TrialNr3]
stim_4 <- dt_onset[SubNr == SubNr4 & TrialNr == TrialNr4]
stim_5 <- dt_onset[SubNr == SubNr5 & TrialNr == TrialNr5]
outcome <- rbind(stim_1, stim_2, stim_3, stim_4, stim_5)
outcome$RowNr <- rep(c(1:72), 5)
# tempo labels
outcome[Tempo == 120]$Tempo <- 250
outcome[Tempo == 110]$Tempo <- 273
outcome[Tempo == 100]$Tempo <- 300
return(outcome)
}
combining_offset <- function(valid, number){
SubNr1 <- valid[Sample == number+counter]$SubNr
SubNr2 <- valid[Sample == number+1+counter]$SubNr
SubNr3 <- valid[Sample == number+2+counter]$SubNr
SubNr4 <- valid[Sample == number+3+counter]$SubNr
SubNr5 <- valid[Sample == number+4+counter]$SubNr
TrialNr1 <- valid[Sample == number+counter]$TrialNr
TrialNr2 <- valid[Sample == number+1+counter]$TrialNr
TrialNr3 <- valid[Sample == number+2+counter]$TrialNr
TrialNr4 <- valid[Sample == number+3+counter]$TrialNr
TrialNr5 <- valid[Sample == number+4+counter]$TrialNr
stim_1 <- dt_offset[SubNr == SubNr1 & TrialNr == TrialNr1]
stim_2 <- dt_offset[SubNr == SubNr2 & TrialNr == TrialNr2]
stim_3 <- dt_offset[SubNr == SubNr3 & TrialNr == TrialNr3]
stim_4 <- dt_offset[SubNr == SubNr4 & TrialNr == TrialNr4]
stim_5 <- dt_offset[SubNr == SubNr5 & TrialNr == TrialNr5]
outcome <- rbind(stim_1, stim_2, stim_3, stim_4, stim_5)
outcome$RowNr <- rep(c(1:72), 5)
# tempo labels
outcome[Tempo == 120]$Tempo <- 250
outcome[Tempo == 110]$Tempo <- 273
outcome[Tempo == 100]$Tempo <- 300
return(outcome)
}
## function
source("./function.R")
# 1. average IOIs
dt_ioi_instance  <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i)
# calculate normIOI
stim$IOI <- diff(c(0, stim$TimeStamp))# convert bpm to ms
stim$normIOI <- stim$IOI/stim$Tempo
# average normIOI
stim_average <- stim[, .(N = length(normIOI), Mean = mean(normIOI), SD = sd(normIOI)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_ioi_instance
dt_ioi_instance <- rbind(dt_ioi_instance, stim_average)
# next instance
counter = counter+4
}
# 2. average duration
dt_du_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i) #onset
stim_offset <- combining_offset(valid, i)
# calculate Duration
stim$Duration <- stim_offset$TimeStamp - stim$TimeStamp
stim$normDu <- stim$Duration/stim$Tempo
# average normDu
stim_average <- stim[, .(N = length(normDu), Mean = mean(normDu), SD = sd(normDu)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_du_instance <- rbind(dt_du_instance, stim_average)
# next instance
counter = counter+4
}
View(dt_du_instance)
# 3. average kv
dt_kv_instance <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i)
# average KV
stim_average <- stim[, .(N = length(Velocity), Mean = mean(Velocity), SD = sd(Velocity)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_du_instance
dt_kv_instance <- rbind(dt_kv_instance, stim_average)
# next instance
counter = counter+4
}
View(dt_kv_instance)
View(stim)
View(dt_du_instance)
View(dt_ioi_instance)
# 1. average IOIs
dt_ioi_instance  <- data.table()
counter = 0
for (i in c(1:6)){
stim <- combining_onset(valid, i)
# calculate normIOI
stim$IOI <- diff(c(0, stim$TimeStamp))# convert bpm to ms
stim$normIOI <- stim$IOI/stim$Tempo
# IOI = 0 if RowNr == 1
stim[RowNr == 1]$normIOI <- 0
# average normIOI
stim_average <- stim[, .(N = length(normIOI), Mean = mean(normIOI), SD = sd(normIOI)), by = .(RowNr)]
# label instance no
stim_average$Instance <- as.character(i)
# add to dt_ioi_instance
dt_ioi_instance <- rbind(dt_ioi_instance, stim_average)
# next instance
counter = counter+4
}
View(dt_ioi_instance)
# 1. determine onsets
dt_playback <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback
valid
View(dt_playback)
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
View(dt_playback_onset)
rm(dt_playback)
print(i)
for (i in 1:nrow(dt_playback_onset)){
print(i)
}
dt_playback_onset$RowNr[1]
dt_playback_onset$RowNr[2]
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 0){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
View(dt_playback_onset)
dt_playback_onset$RowNr[i] == 0
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
dt_playback_onset$RowNr[i] == 1
dt_playback_onset$RowNr[1]
factor(dt_playback_onset$RowNr)
is.integer(dt_playback_onset$RowNr)
dt_playback_onset[i]$RowNr == 1
dt_playback_onset$RowNr[i] == 1
dt_playback_onset$RowNr[i] == "1"
dt_playback_onset$RowNr[i] == 1
dt_playback_onset$RowNr[i] == 1
is.integer(dt_playback_onset$RowNr[i])
dt_playback_onset$RowNr[i] == 1
if (dt_playback_onset$RowNr[i] = 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] = 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
#dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
#dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
#dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
View(dt_playback_onset)
View(dt_playback_onset)
dt_playback_onset$TimeStamp <- NA
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
#dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
View(dt_playback_onset)
dt_playback_onset$RowNr[1] == 1
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_onset$TimeStamp <- NA
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance[i]
}
}
View(dt_playback_onset)
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_ioi_instance
# 1. determine onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance$Mean[i]
}
}
# 1. determine onsets/offsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_offset <- dt_ioi_instance[, c("Instance", "RowNr")]
View(dt_du_instance)
# offsets
dt_playback_offset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_offset$TimeStamp <- dt_playback_onset$TimeStamp+dt_du_instance$Mean
View(dt_offset)
View(dt_onset)
# 1. determine onsets/offsets
# onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_onset$Key_OnOff <- 1
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance$Mean[i]
}
}
# offsets
dt_playback_offset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_offset$Key_OnOff <- 0
dt_playback_offset$TimeStamp <- dt_playback_onset$TimeStamp+dt_du_instance$Mean
View(dt_playback_onset)
# kv
dt_playback_onset$Velocity <- dt_kv_instance$Mean
dt_playback_offset$Velocity <- dt_kv_instance$Mean
View(dt_playback_offset)
View(dt_playback_onset)
dt_ideal <- fread("./ideal.txt", header = T)
View(dt_ideal)
dt_ideal <- fread("./ideal.txt", header = F)
View(dt_ideal)
# Tempo 100 bpm (IOI - 300ms (8th notes))
dt_playback_onset$TimeStamp <- dt_playback_onset$TimeStamp*300
dt_playback_offset$TimeStamp <- dt_playback_offset$TimeStamp*300
View(dt_playback_onset)
View(dt_onset)
# kv
dt_playback_onset$Velocity <- round(dt_kv_instance$Mean)
dt_playback_offset$Velocity <- round(dt_kv_instance$Mean)
View(dt_playback_onset)
# Tempo 100 bpm (IOI - 300ms (8th notes))
dt_playback_onset$TimeStamp <- dt_playback_onset$TimeStamp*300
dt_playback_offset$TimeStamp <- dt_playback_offset$TimeStamp*300
View(dt_playback_offset)
### create playback data! ###
# 1. determine onsets/offsets
# onsets
dt_playback_onset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_onset$Key_OnOff <- 1
for (i in 1:nrow(dt_playback_onset)){
if (dt_playback_onset$RowNr[i] == 1){
dt_playback_onset$TimeStamp[i] <- 0
print(i)
} else {
dt_playback_onset$TimeStamp[i] <- dt_playback_onset$TimeStamp[i-1]+dt_ioi_instance$Mean[i]
}
}
# offsets
dt_playback_offset <- dt_ioi_instance[, c("Instance", "RowNr")]
dt_playback_offset$Key_OnOff <- 0
dt_playback_offset$TimeStamp <- dt_playback_onset$TimeStamp+dt_du_instance$Mean
# kv
dt_playback_onset$Velocity <- round(dt_kv_instance$Mean)
dt_playback_offset$Velocity <- round(dt_kv_instance$Mean)
# Tempo 100 bpm (IOI - 300ms (8th notes))
dt_playback_onset$TimeStamp <- dt_playback_onset$TimeStamp*300
dt_playback_offset$TimeStamp <- dt_playback_offset$TimeStamp*300
View(dt_playback_offset)
View(dt_playback_offset)
View(dt_playback_onset)
print(i)
# create txt for each instance
for (i in 1:5){
print(i)
}
?paste
paste(1,3)
paste(1,3,5,6,7,)
paste(1,3,5,6)
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
filename
# create txt for each instance
for (i in 1:6){
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
instance <- rbind(onset, offset)
# sort by TimeStamp
instance <- instance[order(TimeStamp)]
instance$Pitch <- dt_ideal
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
fwrite(instance, filename)
}
instance
View(instance)
# create txt for each instance
for (i in 1:6){
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
instance <- rbind(onset, offset)
# sort by TimeStamp
instance <- instance[order(TimeStamp)]
instance$Pitch <- dt_ideal$V1
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
fwrite(instance, filename)
}
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
instance <- rbind(onset, offset)
View(instance)
# create txt for each instance
for (i in 1:6){
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
onset$Pitch <- dt_ideal$V1
offset$Pitch <- dt_ideal$V1
instance <- rbind(onset, offset)
# sort by TimeStamp
instance <- instance[order(TimeStamp)]
instance$Pitch <- dt_ideal$V1
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
fwrite(instance, filename)
}
# create txt for each instance
for (i in 1:6){
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
onset$Pitch <- dt_ideal$V1
offset$Pitch <- dt_ideal$V1
instance <- rbind(onset, offset)
# sort by TimeStamp
instance <- instance[order(TimeStamp)]
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
fwrite(instance, filename)
}
# create txt for each instance
for (i in 1:6){
onset <- dt_playback_onset[Instance == i]
offset <- dt_playback_offset[Instance == i]
onset$Pitch <- dt_ideal$V1
offset$Pitch <- dt_ideal$V1
instance <- rbind(onset, offset)
# sort by TimeStamp
instance <- instance[order(TimeStamp)]
# export txt
filename = paste("./", i, "_instance.txt", sep = "")
fwrite(instance, filename)
}
source('~/Google Drive/Project/adaptation-v1.0/material/stimuli/average.R', echo=TRUE)
source('~/Google Drive/Project/adaptation-v1.0/material/stimuli/average.R', echo=TRUE)
View(instance)
source('~/Google Drive/Project/adaptation-v1.0/material/stimuli/average.R', echo=TRUE)
